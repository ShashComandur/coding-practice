/**
* Approach:
* Note: The amount of water for any given height i, is min(left[i], right[i]) - height[i],
        where left and right are arrays that contain the current maximums while traversing
        left and right respectively.
* 1. Consturct the left and right arrays of maxes.
* 2. Loop through heights to calculate the values as explained in the algorithm.
*/

class Solution {
    public int trap(int[] height) {
        int ret = 0;
        int[] left = new int[height.length];
        int[] right = new int[height.length];
        
        left[0] = height[0];
        for (int i = 1; i < height.length; i++) 
            left[i] = Math.max(left[i - 1], height[i]);
        
        right[height.length - 1] = height[height.length - 1];
        for (int i = height.length - 2; i >= 0; i--)
            right[i] = Math.max(right[i + 1], height[i]);
        
        for (int i = 0; i < height.length; i++) {
            ret += Math.min(left[i], right[i]) - height[i];
        }
        
        return ret;
    }
}