/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/**
 * My Approach:
 * 1. Use the BFS traversal algorithm to reach each level of the tree.
 * 2. Initialize lists at the beginning of every level appropriately, add them to the result and return.
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ret = new ArrayList();
        Queue<TreeNode> q = new LinkedList();
        
        if (root == null) return ret;
        q.add(root);
        
        while (!q.isEmpty()) {
            int currentLength = q.size();
            List<Integer> level = new ArrayList();
            for (int i=0; i<currentLength; i++) {
                TreeNode curr = q.poll();
                level.add(curr.val);
                if (curr.left != null)
                    q.add(curr.left);
                if (curr.right != null)
                    q.add(curr.right);
            }
            ret.add(level);
        }
        
        return ret;
    }
}