/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/**
* My Approach: 
*
* 1. Use the definition of the postorder traversal of a binary tree (left child -> right child -> root)
*    to add all the items to a list, returning when complete. 
*/

class Solution {
    // Main function that takes in root
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ret = new ArrayList<>();
        postorder(root, ret);
        return ret;
    }
    // Helper function to actually employ the recursion
    private void postorder(TreeNode node, List<Integer> ret){
        if (node == null)
            return;
        postorder(node.left, ret);
        postorder(node.right, ret);
        ret.add(node.val);
    }
}